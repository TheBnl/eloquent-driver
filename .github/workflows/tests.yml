name: Run Tests

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'

jobs:
  # php-tests:
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       php: [8.1, 8.2, 8.3]
  #       laravel: [10.*, 11.*]
  #       dependency-version: [prefer-lowest, prefer-stable]
  #       exclude:
  #         - php: 8.1
  #           laravel: 11.*

  #   name: P${{ matrix.php }} - L${{ matrix.laravel }} - ${{ matrix.dependency-version }}

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v1

  #     - name: Setup PHP
  #       uses: shivammathur/setup-php@v2
  #       with:
  #         php-version: ${{ matrix.php }}
  #         extension-csv: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick
  #         coverage: none

  #     - name: Set SQLite as the database
  #       run: |
  #         echo "DB_CONNECTION=sqlite" >> $GITHUB_ENV
  #         echo "DB_DATABASE=:memory:" >> $GITHUB_ENV
      
  #     - name: Install dependencies
  #       run: |
  #         composer require "laravel/framework:${{ matrix.laravel }}" --no-interaction --no-update
  #         composer update --${{ matrix.dependency-version }} --prefer-dist --no-interaction --no-suggest

  #     - name: Execute tests
  #       run: vendor/bin/phpunit

  db-tests:
    runs-on: ubuntu-latest

    services:
      # mysql:
      #   image: mysql:8.0
      #   env:
      #     MYSQL_ROOT_PASSWORD: password
      #     MYSQL_DATABASE: test_db
      #   ports:
      #     # - "3305:3306"
      #     - 3306
      #   options: >-
      #     --health-cmd="mysqladmin ping"
      #     --health-interval=10s
      #     --health-timeout=5s
      #     --health-retries=3

      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        ports:
          - "5432:5432"
          # - "5431:5432"
          # - 5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: Password123
          ACCEPT_EULA: Y
        ports:
          - "1433:1433"
          # - 1433
        options: >-
          --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Password123 -Q 'SELECT 1'"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=4

    strategy:
      matrix:
        # php: [8.1, 8.2, 8.3]
        php: [8.3]
        # laravel: [10.*, 11.*]
        laravel: [11.*]
        dependency-version: [prefer-stable]
        # database: [sqlite, mysql, pgsql, sqlsrv]
        database: [pgsql, sqlsrv]
        # database: [pgsql]
        # database: [sqlsrv]
        # exclude:
        #   - php: 8.1
        #     laravel: 11.*
        #   - database: sqlsrv  # Exclude SQL Server for unsupported PHP versions if needed

    name: P${{ matrix.php }} - L${{ matrix.laravel }} - D${{ matrix.database }} - ${{ matrix.dependency-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      # - name: Install ODBC dependencies
      #   run: |
      #     sudo apt-get update
      #     sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 unixodbc-dev

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extension-csv: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, pdo_mysql, pdo_pgsql, sqlsrv
          coverage: none

      - name: Install dependencies
        run: |
          composer require "laravel/framework:${{ matrix.laravel }}" --no-interaction --no-update
          composer update --${{ matrix.dependency-version }} --prefer-dist --no-interaction --no-suggest

      - name: Set up database configuration
        # env:
        #   DB_CONNECTION: "5432"
        #   DB_HOST: "127.0.0.1"
        #   DB_PORT: "3305"
        #   DB_DATABASE: "test_db"
        #   DB_USERNAME: "postgres"
        #   DB_PASSWORD: "password"
  
# run: |
#     echo "DB_CONNECTION=sqlite" >> $GITHUB_ENV
#     echo "DB_DATABASE=:memory:" >> $GITHUB_ENV
        run: |
          if [ "${{ matrix.database }}" == "mysql" ]; then
            echo "DB_CONNECTION=mysql" >> $GITHUB_ENV
            echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
            echo "DB_PORT=3305" >> $GITHUB_ENV
            echo "DB_DATABASE=test_db" >> $GITHUB_ENV
            echo "DB_USERNAME=root" >> $GITHUB_ENV
            echo "DB_PASSWORD=password" >> $GITHUB_ENV
          elif [ "${{ matrix.database }}" == "pgsql" ]; then
            echo "DB_CONNECTION=pgsql" >> $GITHUB_ENV
            echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
            echo "DB_PORT=5432" >> $GITHUB_ENV
            echo "DB_DATABASE=test_db" >> $GITHUB_ENV
            echo "DB_USERNAME=postgres" >> $GITHUB_ENV
            echo "DB_PASSWORD=password" >> $GITHUB_ENV
          elif [ "${{ matrix.database }}" == "sqlsrv" ]; then
            echo "DB_CONNECTION=sqlsrv" >> $GITHUB_ENV
            echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
            echo "DB_PORT=1433" >> $GITHUB_ENV
            echo "DB_DATABASE=test_db" >> $GITHUB_ENV
            echo "DB_USERNAME=sa" >> $GITHUB_ENV
            echo "DB_PASSWORD=Password123" >> $GITHUB_ENV
          else
            echo "DB_CONNECTION=sqlite" >> $GITHUB_ENV
            echo "DB_DATABASE=:memory:" >> $GITHUB_ENV
          fi

      - name: Execute tests
        run: vendor/bin/phpunit

      # - name: Clean up Docker networks
      #   run: docker network prune -f